import streamlit as st
import pandas as pd
import numpy as np

# ConfiguraÃ§Ã£o bÃ¡sica da pÃ¡gina
st.set_page_config(page_title="Exemplo 4: Layout e Containers", page_icon="ðŸ“‘")

# TÃ­tulo e introduÃ§Ã£o
st.title('Layout e Containers no Streamlit')
st.markdown('Este exemplo demonstra como organizar sua aplicaÃ§Ã£o usando diferentes opÃ§Ãµes de layout, utilizando dados de Natal/RN.')

# FunÃ§Ã£o para carregar os dados
@st.cache_data
def carregar_dados():
    # Carrega o dataset contendo informaÃ§Ãµes socioeconÃ´micas dos bairros de Natal/RN diretamente do GitHub
    df = pd.read_csv('https://raw.githubusercontent.com/igendriz/DCA3501-Ciencia-Dados/main/Dataset/Bairros_Natal_v01.csv')
    
    # Remove linhas com quaisquer valores ausentes (NaN)
    df = df.dropna()
    
    # Corrige nomes especÃ­ficos de bairros para padronizaÃ§Ã£o (sem acentos ou espaÃ§os)
    df.loc[0, "bairro"] = 'ns_apresentacao'   # Nossa Senhora da ApresentaÃ§Ã£o
    df.loc[34, "bairro"] = 'ns_nazare'        # Nossa Senhora de NazarÃ©
    df.loc[32, "bairro"] = 'c_esperanca'      # Cidade da EsperanÃ§a
    
    # Remove a coluna 'Unnamed: 0', gerada automaticamente pelo salvamento anterior do CSV
    if 'Unnamed: 0' in df.columns:
        df = df.drop(columns='Unnamed: 0')
    
    return df

# Carrega os dados
df_natal = carregar_dados()

# === Colunas ===
st.header('Colunas')
st.markdown('VocÃª pode dividir a tela em colunas para melhor organizaÃ§Ã£o:')

# Criando trÃªs colunas
col1, col2, col3 = st.columns(3)

# Adicionando conteÃºdo em cada coluna
with col1:
    st.subheader("RegiÃ£o Norte")
    df_norte = df_natal[df_natal['regiao'] == 'norte']
    st.metric(label="NÃºmero de Bairros", value=len(df_norte))
    st.metric(label="Renda MÃ©dia", value=f"R$ {df_norte['renda_mensal_pessoa'].mean():.2f}")

with col2:
    st.subheader("RegiÃ£o Sul")
    df_sul = df_natal[df_natal['regiao'] == 'sul']
    st.metric(label="NÃºmero de Bairros", value=len(df_sul))
    st.metric(label="Renda MÃ©dia", value=f"R$ {df_sul['renda_mensal_pessoa'].mean():.2f}")

with col3:
    st.subheader("RegiÃ£o Leste")
    df_leste = df_natal[df_natal['regiao'] == 'leste']
    st.metric(label="NÃºmero de Bairros", value=len(df_leste))
    st.metric(label="Renda MÃ©dia", value=f"R$ {df_leste['renda_mensal_pessoa'].mean():.2f}")

# === Containers ===
st.header('Containers')
st.markdown('Containers agrupam elementos relacionados:')

with st.container():
    st.write("Este container mostra a distribuiÃ§Ã£o de populaÃ§Ã£o por regiÃ£o.")
    
    # Calculando a populaÃ§Ã£o total por regiÃ£o
    pop_por_regiao = df_natal.groupby('regiao')['populacao'].sum().reset_index()
    
    # Criando um grÃ¡fico de barras simples
    st.bar_chart(pop_por_regiao.set_index('regiao'))
    
    st.write("Podemos ver que a distribuiÃ§Ã£o populacional varia significativamente entre as regiÃµes.")

# === Expanders ===
st.header('Expanders')
st.markdown('Expanders podem ocultar conteÃºdo que nÃ£o precisa ser mostrado o tempo todo:')

with st.expander("Clique para ver detalhes sobre rendimento nominal mÃ©dio"):
    st.write("O rendimento nominal mÃ©dio Ã© medido em salÃ¡rios mÃ­nimos.")
    
    # Ordenando os bairros por rendimento nominal mÃ©dio
    top_bairros = df_natal.sort_values('rendimento_nominal_medio', ascending=False).head(5)
    
    st.write("Top 5 bairros com maior rendimento nominal mÃ©dio:")
    st.dataframe(top_bairros[['bairro', 'regiao', 'rendimento_nominal_medio']])
    
    st.write("EstatÃ­sticas de rendimento nominal mÃ©dio por regiÃ£o:")
    st.dataframe(df_natal.groupby('regiao')['rendimento_nominal_medio'].agg(['mean', 'min', 'max']).round(2))

# === Tabs ===
st.header('Abas')
st.markdown('Abas permitem organizar conteÃºdo em diferentes seÃ§Ãµes:')

tab1, tab2, tab3 = st.tabs(["GrÃ¡fico", "Tabela", "EstatÃ­sticas"])

with tab1:
    st.header("VisualizaÃ§Ã£o em GrÃ¡fico")
    st.write("Renda mensal por pessoa em cada regiÃ£o:")
    
    # Calculando a mÃ©dia de renda por regiÃ£o
    renda_por_regiao = df_natal.groupby('regiao')['renda_mensal_pessoa'].mean().reset_index()
    
    # Criando um grÃ¡fico de barras
    st.bar_chart(renda_por_regiao.set_index('regiao'))

with tab2:
    st.header("VisualizaÃ§Ã£o em Tabela")
    st.write("Dados completos dos bairros:")
    st.dataframe(df_natal)

with tab3:
    st.header("EstatÃ­sticas")
    st.write("EstatÃ­sticas descritivas da populaÃ§Ã£o:")
    st.dataframe(df_natal['populacao'].describe().round(2))
    
    st.write("EstatÃ­sticas descritivas da renda mensal por pessoa:")
    st.dataframe(df_natal['renda_mensal_pessoa'].describe().round(2))

# === Sidebar ===
st.sidebar.header('Filtros na Sidebar')
st.sidebar.write('A sidebar Ã© Ãºtil para controles e filtros.')

# Adicionando filtros na sidebar
regiao_filtro = st.sidebar.selectbox('Filtrar por regiÃ£o:', ['Todas'] + sorted(df_natal['regiao'].unique().tolist()))

if regiao_filtro != 'Todas':
    df_filtrado = df_natal[df_natal['regiao'] == regiao_filtro]
    st.sidebar.write(f"Mostrando {len(df_filtrado)} bairros da regiÃ£o {regiao_filtro}.")
else:
    df_filtrado = df_natal
    st.sidebar.write(f"Mostrando todos os {len(df_filtrado)} bairros.")

# Adicionando um slider para filtrar por populaÃ§Ã£o
pop_min, pop_max = st.sidebar.slider(
    'Filtrar por populaÃ§Ã£o:',
    min_value=int(df_natal['populacao'].min()),
    max_value=int(df_natal['populacao'].max()),
    value=(int(df_natal['populacao'].min()), int(df_natal['populacao'].max()))
)

df_filtrado = df_filtrado[(df_filtrado['populacao'] >= pop_min) & (df_filtrado['populacao'] <= pop_max)]
st.sidebar.write(f"Bairros selecionados: {len(df_filtrado)}")

# Exibindo os resultados filtrados
st.header('Resultados Filtrados')
st.dataframe(df_filtrado)

# Nota de rodapÃ©
st.caption('Este exemplo demonstra as diferentes opÃ§Ãµes de layout disponÃ­veis no Streamlit para organizar sua aplicaÃ§Ã£o, utilizando dados reais de Natal/RN.')
