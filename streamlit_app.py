"""
Aplica√ß√£o Principal - An√°lise Socioecon√¥mica de Natal/RN

Este √© o aplicativo principal que demonstra uma an√°lise completa dos dados socioecon√¥micos
dos bairros de Natal/RN. O objetivo √© mostrar como criar uma aplica√ß√£o Streamlit completa
que integra diferentes elementos:
- Visualiza√ß√µes interativas com Plotly
- Filtros din√¢micos por regi√£o e indicadores
- An√°lises estat√≠sticas
- Layout responsivo e organizado
- Manipula√ß√£o de dados com Pandas

Autor: Victor Gomes
Data: Junho 2024
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Socioecon√¥mica de Natal/RN",
    page_icon="üìä",
    layout="wide"
)

# T√≠tulo e descri√ß√£o
st.title("üìä An√°lise Socioecon√¥mica dos Bairros de Natal/RN")
st.markdown("""
Esta aplica√ß√£o demonstra como transformar an√°lises de dados est√°ticas em visualiza√ß√µes interativas usando Streamlit e Plotly.
Baseado na an√°lise explorat√≥ria de dados socioecon√¥micos dos bairros de Natal/RN.
""")

# Fun√ß√£o para carregar os dados
@st.cache_data
def carregar_dados():
    # Carrega o dataset contendo informa√ß√µes socioecon√¥micas dos bairros de Natal/RN
    df = pd.read_csv('https://raw.githubusercontent.com/igendriz/DCA3501-Ciencia-Dados/main/Dataset/Bairros_Natal_v01.csv')
    
    # Remove linhas com quaisquer valores ausentes (NaN)
    df = df.dropna()
    
    # Corrige nomes espec√≠ficos de bairros para padroniza√ß√£o (sem acentos ou espa√ßos)
    df.loc[0, "bairro"] = 'ns_apresentacao'   # Nossa Senhora da Apresenta√ß√£o
    df.loc[34, "bairro"] = 'ns_nazare'        # Nossa Senhora de Nazar√©
    df.loc[32, "bairro"] = 'c_esperanca'      # Cidade da Esperan√ßa
    
    # Remove a coluna 'Unnamed: 0', gerada automaticamente pelo salvamento anterior do CSV
    if 'Unnamed: 0' in df.columns:
        df = df.drop(columns='Unnamed: 0')
    
    return df

# Carrega os dados
df_natal = carregar_dados()

# Sidebar para filtros
st.sidebar.header("Filtros")

# Filtro por regi√£o
regioes = ["Todas"] + sorted(df_natal["regiao"].unique().tolist())
regiao_selecionada = st.sidebar.selectbox("Selecione a Regi√£o:", regioes)

# Filtro por indicador socioecon√¥mico
indicadores = {
    "Renda Mensal por Pessoa (R$)": "renda_mensal_pessoa",
    "Rendimento Nominal M√©dio (sal. m√≠n.)": "rendimento_nominal_medio",
    "Popula√ß√£o Total": "populacao"
}
indicador_selecionado = st.sidebar.selectbox("Selecione o Indicador:", list(indicadores.keys()))
coluna_indicador = indicadores[indicador_selecionado]

# Filtro por limiar de rendimento
if coluna_indicador in ["renda_mensal_pessoa", "rendimento_nominal_medio"]:
    min_valor = float(df_natal[coluna_indicador].min())
    max_valor = float(df_natal[coluna_indicador].max())
    limiar = st.sidebar.slider(
        "Limiar de Rendimento:",
        min_valor, max_valor,
        (min_valor + max_valor) / 2  # valor padr√£o
    )

# Aplicar filtros
if regiao_selecionada != "Todas":
    df_filtrado = df_natal[df_natal["regiao"] == regiao_selecionada.lower()]
else:
    df_filtrado = df_natal.copy()

# Layout principal com duas colunas
col1, col2 = st.columns([3, 2])

with col1:
    st.subheader("Visualiza√ß√£o Espacial dos Bairros")
    
    # Prepara√ß√£o dos dados para visualiza√ß√£o espacial
    x = df_filtrado['x'] / 1e3   # Coordenada X convertida para quil√¥metros
    y = df_filtrado['y'] / 1e3   # Coordenada Y convertida para quil√¥metros
    
    # Dicion√°rio com cores atribu√≠das para cada regi√£o
    cores_regiao = {
        'norte': 'blue',
        'sul': 'green',
        'leste': 'orange',
        'oeste': 'red'
    }
    
    # Criar figura Plotly para visualiza√ß√£o espacial
    fig_espacial = go.Figure()
    
    # Adicionar pontos para cada regi√£o
    for regiao, grupo in df_filtrado.groupby('regiao'):
        tamanho = grupo[coluna_indicador]
        
        # Ajustar escala de tamanho conforme o indicador
        if coluna_indicador == "populacao":
            tamanho = tamanho / 150
        elif coluna_indicador == "rendimento_nominal_medio":
            tamanho = tamanho * 50
        else:  # renda_mensal_pessoa
            tamanho = tamanho / 20
        
        fig_espacial.add_trace(go.Scatter(
            x=grupo['x'] / 1e3,
            y=grupo['y'] / 1e3,
            mode='markers+text',
            marker=dict(
                size=tamanho,
                color=cores_regiao.get(regiao, 'gray'),
                opacity=0.8,
                line=dict(width=1, color='black')
            ),
            text=grupo['bairro'],
            textposition="top center",
            name=regiao.capitalize(),
            hovertemplate=(
                "<b>%{text}</b><br>" +
                f"Regi√£o: {regiao.capitalize()}<br>" +
                f"{indicador_selecionado}: %{{customdata}}<br>" +
                "Coordenada X: %{x:.2f} km<br>" +
                "Coordenada Y: %{y:.2f} km"
            ),
            customdata=grupo[coluna_indicador]
        ))
    
    # Configura√ß√µes do layout
    fig_espacial.update_layout(
        title=f"Distribui√ß√£o Espacial por {indicador_selecionado}",
        xaxis_title="Coordenada X (km)",
        yaxis_title="Coordenada Y (km)",
        legend_title="Regi√£o",
        height=600,
        hovermode='closest'
    )
    
    # Exibir o gr√°fico
    st.plotly_chart(fig_espacial, use_container_width=True)

with col2:
    st.subheader("An√°lise por Bairro")
    
    # Gr√°fico de barras para o indicador selecionado
    fig_barras = px.bar(
        df_filtrado.sort_values(by=coluna_indicador, ascending=False),
        x="bairro",
        y=coluna_indicador,
        color="regiao",
        title=f"{indicador_selecionado} por Bairro",
        labels={"bairro": "Bairro", coluna_indicador: indicador_selecionado},
        height=600
    )
    
    # Ajustar layout
    fig_barras.update_layout(
        xaxis_tickangle=-45,
        xaxis_title="Bairro",
        yaxis_title=indicador_selecionado
    )
    
    # Exibir o gr√°fico
    st.plotly_chart(fig_barras, use_container_width=True)

# Se√ß√£o adicional para estat√≠sticas
st.subheader("Estat√≠sticas Descritivas")

# Estat√≠sticas por regi√£o
if regiao_selecionada != "Todas":
    st.write(f"Estat√≠sticas para a regi√£o **{regiao_selecionada}**:")
else:
    st.write("Estat√≠sticas por regi√£o:")

# Calcular estat√≠sticas por regi√£o
stats_regiao = df_natal.groupby('regiao')[coluna_indicador].agg(['mean', 'min', 'max', 'count']).reset_index()
stats_regiao.columns = ['Regi√£o', 'M√©dia', 'M√≠nimo', 'M√°ximo', 'Quantidade de Bairros']

# Formatar valores num√©ricos
if coluna_indicador != "populacao":
    stats_regiao['M√©dia'] = stats_regiao['M√©dia'].round(2)
    stats_regiao['M√≠nimo'] = stats_regiao['M√≠nimo'].round(2)
    stats_regiao['M√°ximo'] = stats_regiao['M√°ximo'].round(2)
else:
    stats_regiao['M√©dia'] = stats_regiao['M√©dia'].round(0).astype(int)
    stats_regiao['M√≠nimo'] = stats_regiao['M√≠nimo'].round(0).astype(int)
    stats_regiao['M√°ximo'] = stats_regiao['M√°ximo'].round(0).astype(int)

# Exibir tabela de estat√≠sticas
st.dataframe(stats_regiao, use_container_width=True)

# Adicionar um gr√°fico de compara√ß√£o entre regi√µes
st.subheader("Compara√ß√£o entre Regi√µes")

fig_comparacao = px.bar(
    stats_regiao,
    x='Regi√£o',
    y='M√©dia',
    color='Regi√£o',
    title=f"M√©dia de {indicador_selecionado} por Regi√£o",
    labels={"M√©dia": f"M√©dia de {indicador_selecionado}"},
    text_auto=True
)

st.plotly_chart(fig_comparacao, use_container_width=True)

# Rodap√© com informa√ß√µes
st.markdown("---")
st.markdown("""
**Fonte dos dados:** IBGE (dados adaptados para fins did√°ticos)  
**Aplica√ß√£o desenvolvida com:** Streamlit e Plotly  
**Contexto:** Aula de Ci√™ncia de Dados - Visualiza√ß√£o Interativa
""")
